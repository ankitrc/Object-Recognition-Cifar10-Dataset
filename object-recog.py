# -*- coding: utf-8 -*-
"""CIFARFINAL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JCqaVkKIysKgLVHFLAWmd0INh8Xbdi2f
"""

import numpy as np
from keras.models import Sequential
from keras.optimizers import Adam, SGD
from keras.models import load_model
from keras.layers import GlobalAveragePooling2D, Lambda, Conv2D, MaxPooling2D, Dropout, Dense, Flatten, Activation, Convolution2D
from keras.preprocessing.image import ImageDataGenerator
from keras.datasets import cifar10
from keras.utils import np_utils

IMAGE_SIZE = 32
CHANNELS = 3
NUM_EPOCH = 400
LEARN_RATE = 1.0e-4

# load training and testing data
(x_train, y_train), (x_test, y_test) = cifar10.load_data()
x_train = x_train.astype('float32') / 255
x_test = x_test.astype('float32') / 255
x_train.shape

# number of classes
num_classes = len(np.unique(y_train))
num_classes

# CNN model for image classification
def cnn_model_1():
    model = Sequential()
    model.add(Convolution2D(filters=96, kernel_size=3, activation='relu', padding = 'same', input_shape=(IMAGE_SIZE,IMAGE_SIZE,CHANNELS)))    
    model.add(Dropout(0.2))
  
    model.add(Convolution2D(filters=96, kernel_size=3, activation='relu', padding = 'same', strides=2))  
    model.add(Convolution2D(filters=96, kernel_size=3, activation='relu', padding = 'same'))  
    model.add(Dropout(0.5))
    
        
    model.add(Convolution2D(filters=192, kernel_size=3, activation='relu', padding = 'same'))    
    model.add(Convolution2D(filters=192, kernel_size=3, activation='relu', padding = 'same'))
    model.add(Convolution2D(filters=192, kernel_size=3, activation='relu', padding = 'same', strides = 2))    
    model.add(Dropout(0.5))
    
    model.add(Convolution2D(filters=192, kernel_size=3, activation='relu', padding = 'same'))
    model.add(Convolution2D(filters=192, kernel_size = 1,padding='valid'))
    model.add(Convolution2D(filters=10, kernel_size = 1, padding='valid'))

    model.add(GlobalAveragePooling2D())
    
    model.add(Activation('softmax'))

    model.summary()
    
    return model

# one hot encoding for labels
y_train = np_utils.to_categorical(y_train, num_classes=num_classes)
y_test = np_utils.to_categorical(y_test, num_classes=num_classes)

y_train[1]

model = cnn_model_1()

model.compile(loss='categorical_crossentropy',
              optimizer=Adam(lr=LEARN_RATE),
              metrics = ['accuracy'])

model.fit(x_train, y_train,
                    batch_size = 128,
                    epochs = NUM_EPOCH,
                    validation_data= (x_test, y_test),
                    verbose=0)

acc = model.evaluate(x_test, y_test, batch_size=128, verbose=1)

acc

